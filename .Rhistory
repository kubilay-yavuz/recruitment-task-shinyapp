selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#             layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$mapZoom,{
leafletProxy("distPlot") %>%
setView(zoom = input$mapZoom)
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#             layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#             layerId="colorLegend")
observeEvent(input$mapZoom,{
leafletProxy("distPlot") %>%
setView(zoom = input$mapZoom)
})
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#             layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>',
options = providerTileOptions(minZoom = 8, maxZoom = 10)
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
ui <- pageWithSidebar(
titlePanel("Appsilon Recruitment Task"),
leafletOutput(outputId = "distPlot",
width = "700px",
height = "300px"),
sidebarPanel(
selectizeInput(
inputId = "vesselTypeMenu",
label = "Select vessel type",
choices = c("All types", unique(ships.data$ship_type)),
selected = character(0),
multiple = F
),
selectizeInput(
inputId = "vesselNameMenu",
label = "Select vessel name",
choices = c("",unique(ships.data$SHIPNAME)),
selected = character(0),
multiple = F
)
# buraya leaflet koyucaz
)
)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#             layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>',
options = providerTileOptions(minZoom = 8, maxZoom = 10)
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#             layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
%>%
addLegend("bottomleft", pal=c("blue","red"), values=c("blue","1"), title="colorBy",
layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)%>%
addLegend("bottomleft", pal=c("blue","red"), values=c("blue","1"), title="colorBy",
layerId="colorLegend")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)%>%
addLegend("bottomleft", pal=c("blue","red"), values=c("blue","1"), title="colorBy")
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# buraya renderUI gelecek
observeEvent(input$vesselTypeMenu,{
if (input$vesselTypeMenu!="All types"){
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[ship_type==input$vesselTypeMenu,SHIPNAME])))
print("basd")
}
else{
updateSelectizeInput(session, "vesselNameMenu", label="Select vessel name",
choices = c("",
unique(ships.data[,SHIPNAME])))
print("aa")
}
})
observeEvent(input$vesselNameMenu,{
print(input$vesselNameMenu)
if (input$vesselNameMenu!=""){
selectedVesselDf<-ships.data[SHIPNAME==input$vesselNameMenu]
selectedVesselDf$LATShifted<-shift(selectedVesselDf$LAT,1)
selectedVesselDf$LONShifted<-shift(selectedVesselDf$LON,1)
selectedVesselDf$distanceBetween<-euclid(selectedVesselDf[,c("LAT","LON")],
selectedVesselDf[,c("LATShifted","LONShifted")])
selectedVesselDf <- selectedVesselDf[order(-distanceBetween, -DATETIME), ]
lonLats<-selectedVesselDf[,c("LAT","LON","LATShifted","LONShifted")][1]
distanceBet<-distm(c(lonLats$LON, lonLats$LAT), c(lonLats$LONShifted, lonLats$LATShifted), fun = distHaversine)
print(lonLats)
print(distanceBet)
leafletProxy("distPlot",data=lonLats) %>%
clearShapes() %>%
addCircles(lonLats$LON, lonLats$LAT, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "blue") %>%
addCircles(lonLats$LONShifted, lonLats$LATShifted, radius=190,
stroke=FALSE, fillOpacity=0.4,color = "red") %>%
setView(lng = (lonLats$LON+lonLats$LONShifted)/2, lat = (lonLats$LAT+lonLats$LATShifted)/2, zoom = 12)
}
})
output$distPlot <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
fitBounds(min(ships.data$LON), min(ships.data$LAT), max(ships.data$LON), max(ships.data$LAT))
})
}
shinyApp(ui = ui, server = server)
